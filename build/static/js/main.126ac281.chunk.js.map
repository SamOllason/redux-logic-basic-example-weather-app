{"version":3,"sources":["actions/index.js","actions/types.js","static/cityTypes.js","styles/appStyles.js","App.js","redux/reducers/weatherDataHandling.js","redux/reducers/requestLogging.js","redux/reducers/index.js","redux/logic/weatherDataHandlingLogic.js","redux/logic/index.js","redux/appStore.js","serviceWorker.js","index.js"],"names":["incrementNumberOfRequestsMade","type","getWeatherData","city","payload","cityTypes","appStyles","titleContainerStyle","textAlign","headerContainerStyle","height","borderBottom","topContainerStyle","paddingTop","bottomContainerStyle","wholeApp","width","buttonStyle","padding","margin","background","fontSize","border","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedCity","nextProps","console","log","actions","setState","_this2","weatherSummaryComponent","isFetching","react_default","a","createElement","weatherSummary","style","onClick","handleClick","numberOfRequests","Component","connect","weatherDataHandling","requestLogging","dispatch","bindActionCreators","initialState","arguments","length","undefined","action","objectSpread","action_payload","weather","description","rootReducer","combineReducers","weatherDataHandlingLogic","createLogic","latest","processOptions","dispatchReturn","successType","failType","process","_ref","axios","concat","then","resp","data","logic","toConsumableArray","deps","httpClient","logicMiddleware","createLogicMiddleware","rootLogic","composedMiddleware","compose","applyMiddleware","createStore","Boolean","window","location","hostname","match","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.126ac281.chunk.js","sourcesContent":["import * as types from './types';\n\n// These are action creators. They are simply wrappers around actions\n// that make it neater for components to dispatch actions. Instead\n// of the component having to use a dispatch method and include the action\n// themselves they can simple call one of these action creators\n// which will be passed as a callback function.\n\nexport const incrementNumberOfRequestsMade = () => ({\n    type: types.INCREMENT_NUMBER_OF_REQUESTS_MADE\n});\n\nexport const getWeatherData = (city) => ({\n    type: types.GET_WEATHER_FOR_CITY,\n    payload: city\n});","export const INCREMENT_NUMBER_OF_REQUESTS_MADE = 'INCREMENT_NUMBER_OF_REQUESTS_MADE';\n\nexport const GET_WEATHER_FOR_CITY             = 'GET_WEATHER_FOR_CITY';\nexport const GET_WEATHER_FOR_CITY_SUCCESSFUL  = 'GET_WEATHER_FOR_CITY_SUCCESSFUL';\nexport const GET_WEATHER_FOR_CITY_FAILURE     = 'GET_WEATHER_FOR_CITY_FAILURE';\n","export default {\n    London: \"London\",\n    New_York: \"New York\",\n    Paris: \"Paris\",\n}","export default {\n\n    titleContainerStyle: {\n        textAlign: 'center',\n    },\n\n    headerContainerStyle: {\n        height: '100px',\n        textAlign: 'center',\n        borderBottom: 'solid thin lightgrey'\n    },\n\n    topContainerStyle: {\n        height: '150px',\n        paddingTop: '30px',\n        textAlign: 'center',\n\n        borderBottom: 'solid thin lightgrey'\n    },\n\n    bottomContainerStyle: {\n        height: '100px',\n        paddingTop: '30px',\n        textAlign: 'center',\n    },\n\n    wholeApp : {\n        width: '400px'\n    },\n\n    buttonStyle: {\n        padding: '10px',\n        margin: '10px',\n        background: 'white',\n        fontSize: 'medium',\n        border: 'solid thin #78C2AD !important',\n    }\n\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { incrementNumberOfRequestsMade, getWeatherData} from './actions'\nimport cityTypes from './static/cityTypes';\nimport appStyles from './styles/appStyles';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedCity: '-'\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log({\n            nextProps: nextProps\n        });\n    }\n\n    handleClick(city){\n        this.props.actions.incrementNumberOfRequestsMade();\n\n        this.setState({\n            selectedCity: city\n        });\n\n        this.props.actions.getWeatherData(city);\n    }\n  render() {\n\n      const weatherSummaryComponent = this.props.isFetching ?\n          <div>\n              Fetching...\n          </div>\n          :\n          <div>\n            <b>{this.props.weatherSummary}</b>\n          </div>;\n\n\n    return (\n      <div style={appStyles.wholeApp}>\n\n          <h1 style={appStyles.titleContainerStyle}>Weather app</h1>\n\n          <div style={appStyles.headerContainerStyle}>\n              <p>Simple example of Redux and Redux-Logic</p>\n              <p>Article and source code</p>\n          </div>\n\n\n          <div style={appStyles.topContainerStyle}>\n            <div>Click on a city to show the weather there</div>\n\n            <button\n                onClick={() => this.handleClick(cityTypes.London)}\n                style={appStyles.buttonStyle}\n            >\n                {cityTypes.London}\n            </button>\n\n\n            <button\n                onClick={() => this.handleClick(cityTypes.Paris)}\n                style={appStyles.buttonStyle}\n            >\n                {cityTypes.Paris}\n            </button>\n\n            <button\n                onClick={() => this.handleClick(cityTypes.New_York)}\n                style={appStyles.buttonStyle}\n            >\n                {cityTypes.New_York}\n            </button>\n\n        </div>\n          <div style={appStyles.bottomContainerStyle}>\n              <div>Selected City: <div><b>{this.state.selectedCity}</b></div></div>\n            <div>Weather in Selected City: {weatherSummaryComponent}</div>\n            <div>Number of requests made:<b>{this.props.numberOfRequests}</b></div>\n          </div>\n      </div>\n    );\n  }\n}\n\n/*\n     mapDispatchToProps\n\n     Allows us to pass the dispatch methods as callbacks via props\n     into our view layer. This way our component can easily\n     dispatch actions through action-creator functions. This is cleaner\n     than having components dispatch actions themselves\n\n */\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        actions: bindActionCreators({\n            incrementNumberOfRequestsMade,\n            getWeatherData,\n\n        }, dispatch)\n    };\n};\n\n/*\n    mapStateToProps\n\n    Allows us to pass central application state as read-only props to our component.\n */\n\nconst mapStateToProps = (state) => {\n    return {\n        isFetching: state.weatherDataHandling.isFetching,\n        weatherSummary: state.weatherDataHandling.weatherSummary,\n\n        numberOfRequests: state.requestLogging.numberOfRequests\n    };\n};\n\n// We use the connect feature of react-redux to bind and subscribe our component\n// to our Redux Store. This way, whenever the state is changed in the Store\n// the relevant changes will be automatically propagated to this component\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import * as types from '../../actions/types';\n\nconst initialState = {\n    isFetching: false,\n    weatherSummary: \"no weather data fetched yet\"\n};\n\n// Use ES6 default parameter to provide argument to arrow function\nconst weatherDataHandling = (state = initialState, action) => {\n    switch (action.type) {\n\n        case types.GET_WEATHER_FOR_CITY:\n            return {\n                ...state,\n                isFetching: true\n            };\n\n        case types.GET_WEATHER_FOR_CITY_SUCCESSFUL:\n\n            console.log({\n                action_payload: action.payload\n            });\n\n            return {\n                ...state,\n                isFetching: false,\n                weatherSummary: action.payload.weather[0].description,\n            };\n\n        case types.GET_WEATHER_FOR_CITY_FAILURE:\n            return {\n                ...state,\n                weatherSummary: \"Failure fetching weather data\",\n                isFetching: false\n            };\n\n        default:\n            // If action is none of these then just return state - i.e. don't mutate app state!\n            return state;\n    }\n};\n\nexport default weatherDataHandling;\n","import * as types from '../../actions/types';\n\nconst initialState = {\n    numberOfRequests: 0,\n};\n\n// Use ES6 default parameter to provide argument to arrow function\nconst requestLogging = (state = initialState, action) => {\n    switch (action.type) {\n\n        case types.INCREMENT_NUMBER_OF_REQUESTS_MADE:\n            return {\n                ...state,\n                numberOfRequests: state.numberOfRequests + 1\n            };\n\n        default:\n            // If action is none of these then just return state - i.e. don't mutate app state!\n            return state;\n    }\n};\n\nexport default requestLogging;\n","import { combineReducers } from 'redux';\nimport weatherDataHandling from './weatherDataHandling';\nimport requestLogging from './requestLogging';\n\nconst rootReducer = combineReducers({\n    weatherDataHandling,\n    requestLogging\n});\n\nexport default rootReducer;\n","import * as types from '../../actions/types';\nimport { createLogic } from 'redux-logic';\nimport axios from 'axios';\n\nconst appId = \"b0a33ce7b1e3c397415e4ae403b6a3fd\";\n\nconst getWeatherDataLogic = createLogic({\n    type: types.GET_WEATHER_FOR_CITY,  // Respond to actions of this type\n    latest: true, // Only provide the latest response if fired many times\n\n    processOptions: {\n        dispatchReturn: true, // Automatically dispatch the actions below from the resolved/rejected promise\n\n        successType: types.GET_WEATHER_FOR_CITY_SUCCESSFUL, // If promise success, dispatch this action\n        failType: types.GET_WEATHER_FOR_CITY_FAILURE // If promise fails, dispatch this action\n    },\n\n    // Declare our promise inside a process\n    // When promise returns one of the actions above will be processed\n    process({ action }) {\n        console.log('started process with action type: ' + action.type);\n        console.log('started process with action payload: ' + action.payload);\n\n        return axios(`https://api.openweathermap.org/data/2.5/weather?q=${action.payload}&APPID=${appId}`)\n            .then(resp => resp.data);\n    }\n});\n\nexport default [\n    getWeatherDataLogic\n];\n","import weatherDataHandlingLogic from './weatherDataHandlingLogic';\n\nexport default [\n    ...weatherDataHandlingLogic\n];\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport rootReducer from \"./reducers\";\nimport { createLogicMiddleware } from 'redux-logic';\nimport rootLogic from './logic/';\nimport axios from 'axios';\n\n// Dependencies for logic\nconst deps = {\n    httpClient: axios\n};\n\n// Create middleware\nconst logicMiddleware    = createLogicMiddleware(rootLogic, deps);\n\n// Prepare middleware to ensure Redux can use it\nconst composedMiddleware = compose(applyMiddleware(logicMiddleware));\n\n// Store is where application state is held.\n// Create store with reducers and our logic\nexport default createStore(rootReducer,composedMiddleware);\n\n\n// NOTE:\n// If we were using without redux-logic we would only need this line:\n// export default createStore(rootReducer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/appStore\";\nimport * as serviceWorker from './serviceWorker';\n\n// The Provider that we use from react-redux\n// allows our store to be accessed in 'App' and all child components\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}