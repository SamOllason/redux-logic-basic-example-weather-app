{"ast":null,"code":"import _objectSpread from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as types from '../../actions/types';\nvar initialState = {\n  isFetching: false,\n  weatherSummary: \"not weather data fetched yet\"\n}; // Use ES6 default parameter to provide argument to arrow function\n\nvar weatherDataHandling = function weatherDataHandling() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.GET_WEATHER_FOR_CITY:\n      return _objectSpread({}, state, {\n        isFetching: true\n      });\n\n    case types.GET_WEATHER_FOR_CITY_SUCCESSFUL:\n      console.log({\n        action_payload: action.payload\n      });\n      return _objectSpread({}, state, {\n        isFetching: false\n      });\n\n    case types.GET_WEATHER_FOR_CITY_FAILURE:\n      return _objectSpread({}, state, {\n        weatherSummary: \"Failure fetching weather data\",\n        isFetching: false\n      });\n\n    default:\n      // If action is none of these then just return state - i.e. don't mutate app state!\n      return state;\n  }\n};\n\nexport default weatherDataHandling;","map":{"version":3,"sources":["/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/src/redux/reducers/weatherDataHandling.js"],"names":["types","initialState","isFetching","weatherSummary","weatherDataHandling","state","action","type","GET_WEATHER_FOR_CITY","GET_WEATHER_FOR_CITY_SUCCESSFUL","console","log","action_payload","payload","GET_WEATHER_FOR_CITY_FAILURE"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,qBAAvB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,KADK;AAEjBC,EAAAA,cAAc,EAAE;AAFC,CAArB,C,CAKA;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKP,KAAK,CAACQ,oBAAX;AACI,+BACOH,KADP;AAEIH,QAAAA,UAAU,EAAE;AAFhB;;AAKJ,SAAKF,KAAK,CAACS,+BAAX;AAEIC,MAAAA,OAAO,CAACC,GAAR,CAAY;AACRC,QAAAA,cAAc,EAAEN,MAAM,CAACO;AADf,OAAZ;AAIA,+BACOR,KADP;AAEIH,QAAAA,UAAU,EAAE;AAFhB;;AAKJ,SAAKF,KAAK,CAACc,4BAAX;AACI,+BACOT,KADP;AAEIF,QAAAA,cAAc,EAAE,+BAFpB;AAGID,QAAAA,UAAU,EAAE;AAHhB;;AAMJ;AACI;AACA,aAAOG,KAAP;AA5BR;AA8BH,CA/BD;;AAiCA,eAAeD,mBAAf","sourcesContent":["import * as types from '../../actions/types';\n\nconst initialState = {\n    isFetching: false,\n    weatherSummary: \"not weather data fetched yet\"\n};\n\n// Use ES6 default parameter to provide argument to arrow function\nconst weatherDataHandling = (state = initialState, action) => {\n    switch (action.type) {\n\n        case types.GET_WEATHER_FOR_CITY:\n            return {\n                ...state,\n                isFetching: true\n            };\n\n        case types.GET_WEATHER_FOR_CITY_SUCCESSFUL:\n\n            console.log({\n                action_payload: action.payload\n            });\n\n            return {\n                ...state,\n                isFetching: false,\n            };\n\n        case types.GET_WEATHER_FOR_CITY_FAILURE:\n            return {\n                ...state,\n                weatherSummary: \"Failure fetching weather data\",\n                isFetching: false\n            };\n\n        default:\n            // If action is none of these then just return state - i.e. don't mutate app state!\n            return state;\n    }\n};\n\nexport default weatherDataHandling;"]},"metadata":{},"sourceType":"module"}