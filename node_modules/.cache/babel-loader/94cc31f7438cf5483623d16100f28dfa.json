{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport rootReducer from \"./reducers\";\nimport { createLogicMiddleware } from 'redux-logic';\nimport rootLogic from './logic/';\nimport axios from 'axios'; // Dependencies for Logic\n\nvar deps = {\n  httpClient: axios\n}; // Create middleware\n\nvar logicMiddleware = createLogicMiddleware(rootLogic, deps); // Prepare middleware to ensure Redux can use it\n\nvar composedMiddleware = compose(applyMiddleware(logicMiddleware)); // Our Redux Store is where application state is held\n// Create store with reducers and all our Logic\n\nexport default createStore(rootReducer, composedMiddleware); // NOTE, for information only:\n// If we were just using Redux and not using Redux-Logic we would only need this line:\n// export default createStore(rootReducer);","map":{"version":3,"sources":["/Users/samollason/Documents/Develop/Web/simple-weather-app-redux-logic-example/src/redux/appStore.js"],"names":["applyMiddleware","createStore","compose","rootReducer","createLogicMiddleware","rootLogic","axios","deps","httpClient","logicMiddleware","composedMiddleware"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,SAASC,qBAAT,QAAsC,aAAtC;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAMC,IAAI,GAAG;AACTC,EAAAA,UAAU,EAAEF;AADH,CAAb,C,CAIA;;AACA,IAAMG,eAAe,GAAGL,qBAAqB,CAACC,SAAD,EAAYE,IAAZ,CAA7C,C,CAEA;;AACA,IAAMG,kBAAkB,GAAGR,OAAO,CAACF,eAAe,CAACS,eAAD,CAAhB,CAAlC,C,CAEA;AACA;;AACA,eAAeR,WAAW,CAACE,WAAD,EAAaO,kBAAb,CAA1B,C,CAEA;AACA;AACA","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\nimport rootReducer from \"./reducers\";\nimport { createLogicMiddleware } from 'redux-logic';\nimport rootLogic from './logic/';\nimport axios from 'axios';\n\n// Dependencies for Logic\nconst deps = {\n    httpClient: axios\n};\n\n// Create middleware\nconst logicMiddleware = createLogicMiddleware(rootLogic, deps);\n\n// Prepare middleware to ensure Redux can use it\nconst composedMiddleware = compose(applyMiddleware(logicMiddleware));\n\n// Our Redux Store is where application state is held\n// Create store with reducers and all our Logic\nexport default createStore(rootReducer,composedMiddleware);\n\n// NOTE, for information only:\n// If we were just using Redux and not using Redux-Logic we would only need this line:\n// export default createStore(rootReducer);\n"]},"metadata":{},"sourceType":"module"}