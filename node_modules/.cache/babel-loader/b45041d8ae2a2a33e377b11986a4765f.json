{"ast":null,"code":"import _objectSpread from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as types from '../../actions/types';\nvar initialState = {\n  numberOfRequests: 0,\n  weatherSummary: \"not selected city\"\n}; // Use ES6 default parameter to provide argument to arrow function\n\nvar requestLogging = function requestLogging() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.INCREMENT_NUMBER_OF_REQUESTS_MADE:\n      console.log('INCREMENT_NUMBER_OF_REQUESTS_MADE'); // Get current number of requests form application state and increment\n\n      var newNumberOfRequests = state.numberOfRequests++;\n      return _objectSpread({}, state, {\n        numberOfRequests: newNumberOfRequests\n      });\n\n    default:\n      // If action is none of these then just return state - i.e. don't mutate app state!\n      return state;\n  }\n};\n\nexport default requestLogging;","map":{"version":3,"sources":["/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/src/redux/reducers/requestLogging.js"],"names":["types","initialState","numberOfRequests","weatherSummary","requestLogging","state","action","type","INCREMENT_NUMBER_OF_REQUESTS_MADE","console","log","newNumberOfRequests"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,qBAAvB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,gBAAgB,EAAE,CADD;AAEjBC,EAAAA,cAAc,EAAE;AAFC,CAArB,C,CAKA;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKP,KAAK,CAACQ,iCAAX;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EADJ,CAGI;;AACA,UAAMC,mBAAmB,GAAGN,KAAK,CAACH,gBAAN,EAA5B;AAEA,+BACOG,KADP;AAEIH,QAAAA,gBAAgB,EAAES;AAFtB;;AAKJ;AACI;AACA,aAAON,KAAP;AAfR;AAiBH,CAlBD;;AAoBA,eAAeD,cAAf","sourcesContent":["import * as types from '../../actions/types';\n\nconst initialState = {\n    numberOfRequests: 0,\n    weatherSummary: \"not selected city\"\n};\n\n// Use ES6 default parameter to provide argument to arrow function\nconst requestLogging = (state = initialState, action) => {\n    switch (action.type) {\n\n        case types.INCREMENT_NUMBER_OF_REQUESTS_MADE:\n            console.log('INCREMENT_NUMBER_OF_REQUESTS_MADE');\n\n            // Get current number of requests form application state and increment\n            const newNumberOfRequests = state.numberOfRequests++;\n\n            return {\n                ...state,\n                numberOfRequests: newNumberOfRequests\n            };\n\n        default:\n            // If action is none of these then just return state - i.e. don't mutate app state!\n            return state;\n    }\n};\n\nexport default requestLogging;\n"]},"metadata":{},"sourceType":"module"}