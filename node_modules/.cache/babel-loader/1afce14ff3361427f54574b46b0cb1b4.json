{"ast":null,"code":"import _classCallCheck from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { incrementNumberOfRequestsMade, getWeatherData } from './actions';\nimport cityTypes from './static/cityTypes';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log({\n        nextProps: nextProps\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(city) {\n      console.log({\n        city_clicked: city\n      });\n      this.props.actions.incrementNumberOfRequestsMade(); // WE WILL UNCOMMENT TO THIS WHEN WE ADD REDUX_LOGIC!!\n      // this.props.actions.getWeatherData(city);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var weatherSummaryComponent = this.props.isFetching ? // we want to display a loading message to user while async data fetch happens\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Fetching...\") : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, this.props.weatherSummary));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Click on a city to show the weather there\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.handleClick(cityTypes.London);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, cityTypes.London), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.handleClick(cityTypes.Paris);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, cityTypes.Paris), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.handleClick(cityTypes.New_York);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"'\", cityTypes.New_York)), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Weather in Selected City: \", weatherSummaryComponent), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Number of requests made:\", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.props.numberOfRequests))));\n    }\n  }]);\n\n  return App;\n}(Component);\n/*\n     mapDispatchToProps\n\n     Allows us to pass the dispatch methods as callbacks via props\n     into our view layer. This way our component can easily\n     dispatch actions through action-creator functions. This is cleaner\n     than having them dispatch actions themselves\n\n */\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      incrementNumberOfRequestsMade: incrementNumberOfRequestsMade,\n      getWeatherData: getWeatherData\n    }, dispatch)\n  };\n};\n/*\n    mapStateToProps\n\n    Allows us to pass application state as read-only props to our component.\n */\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isFetching: state.weatherDataHandling.isFetching,\n    weatherSummary: state.weatherDataHandling.weatherSummary,\n    numberOfRequests: state.requestLogging.numberOfRequests\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/src/App.js"],"names":["React","Component","connect","bindActionCreators","incrementNumberOfRequestsMade","getWeatherData","cityTypes","App","props","nextProps","console","log","city","city_clicked","actions","weatherSummaryComponent","isFetching","weatherSummary","handleClick","London","Paris","New_York","numberOfRequests","mapDispatchToProps","dispatch","mapStateToProps","state","weatherDataHandling","requestLogging"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { incrementNumberOfRequestsMade, getWeatherData} from './actions'\nimport cityTypes from './static/cityTypes';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log({\n            nextProps: nextProps\n        });\n    }\n\n    handleClick(city){\n        console.log({\n            city_clicked: city\n        });\n        this.props.actions.incrementNumberOfRequestsMade();\n\n        // WE WILL UNCOMMENT TO THIS WHEN WE ADD REDUX_LOGIC!!\n        // this.props.actions.getWeatherData(city);\n\n    }\n  render() {\n\n      const weatherSummaryComponent = this.props.isFetching ?\n          // we want to display a loading message to user while async data fetch happens\n          <div>\n              Fetching...\n          </div>\n          :\n          <div>\n              <b>{this.props.weatherSummary}</b>\n          </div>;\n\n    return (\n      <div>\n        <div>\n            <div>Click on a city to show the weather there</div>\n            <button onClick={() => this.handleClick(cityTypes.London)}>{cityTypes.London}</button>\n            <button onClick={() => this.handleClick(cityTypes.Paris)}>{cityTypes.Paris}</button>\n            <button onClick={() => this.handleClick(cityTypes.New_York)}>'{cityTypes.New_York}</button>\n        </div>\n          <div>\n            <div>Weather in Selected City: {weatherSummaryComponent}</div>\n            <div>Number of requests made:<b>{this.props.numberOfRequests}</b></div>\n          </div>\n      </div>\n    );\n  }\n}\n\n/*\n     mapDispatchToProps\n\n     Allows us to pass the dispatch methods as callbacks via props\n     into our view layer. This way our component can easily\n     dispatch actions through action-creator functions. This is cleaner\n     than having them dispatch actions themselves\n\n */\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        actions: bindActionCreators({\n            incrementNumberOfRequestsMade,\n            getWeatherData,\n\n        }, dispatch)\n    };\n};\n\n/*\n    mapStateToProps\n\n    Allows us to pass application state as read-only props to our component.\n */\n\nconst mapStateToProps = (state) => {\n    return {\n        isFetching: state.weatherDataHandling.isFetching,\n        weatherSummary: state.weatherDataHandling.weatherSummary,\n\n        numberOfRequests: state.requestLogging.numberOfRequests\n    };\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}