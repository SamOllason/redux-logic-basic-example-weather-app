{"ast":null,"code":"import _classCallCheck from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { incrementNumberOfRequestsMade, getWeatherData } from './actions';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var weatherSummaryComponent = this.state.isFetching ? // we want to display a loading message to user while asycn data fetch happens\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, \"Fetching...\") : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, this.props.weatherSummary));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Show weather:\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"London\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Paris\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"New York\"), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Peckham\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Weather in Selected City: \", weatherSummaryComponent), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"Number of requests made:\", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.props.numberOfRequests))));\n    }\n  }]);\n\n  return App;\n}(Component);\n/*\n     mapDispatchToProps\n\n     Allows us to pass the dispatch methods as callbacks via props\n     into our view layer. This way our component can easily\n     dispatch actions through action-creator functions. This is cleaner\n     than having them dispatch actions themselves\n\n */\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators({\n      incrementNumberOfRequestsMade: incrementNumberOfRequestsMade,\n      getWeatherData: getWeatherData\n    }, dispatch)\n  };\n};\n/*\n    mapStateToProps\n\n    Allows us to pass application state as read-only props to our component.\n */\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isFetching: state.weatherDataHandling.isFetching,\n    weatherSummary: state.weatherDataHandling.weatherSummary,\n    numberOfRequests: state.requestLogging.numberOfRequests\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/samollason/Documents/Develop/Projects/simple-weather-app-redux-logic-example-01/app/src/App.js"],"names":["React","Component","connect","bindActionCreators","incrementNumberOfRequestsMade","getWeatherData","App","weatherSummaryComponent","state","isFetching","props","weatherSummary","numberOfRequests","mapDispatchToProps","dispatch","actions","mapStateToProps","weatherDataHandling","requestLogging"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,6BAAT,EAAwCC,cAAxC,QAA6D,WAA7D;;IAEMC,G;;;;;;;;;;;;;6BACK;AAEL,UAAMC,uBAAuB,GAAG,KAAKC,KAAL,CAAWC,UAAX,GAC5B;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAF4B,GAM5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKC,KAAL,CAAWC,cAAf,CADJ,CANJ;AAUF,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBALJ,CADF,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAgCJ,uBAAhC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKG,KAAL,CAAWE,gBAAf,CAA7B,CAFF,CARJ,CADF;AAeD;;;;EA5BeX,S;AA+BlB;;;;;;;;;;;AAUA,IAAMY,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACrC,SAAO;AACHC,IAAAA,OAAO,EAAEZ,kBAAkB,CAAC;AACxBC,MAAAA,6BAA6B,EAA7BA,6BADwB;AAExBC,MAAAA,cAAc,EAAdA;AAFwB,KAAD,EAIxBS,QAJwB;AADxB,GAAP;AAOH,CARD;AAUA;;;;;;;AAMA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACR,KAAD,EAAW;AAC/B,SAAO;AACHC,IAAAA,UAAU,EAAED,KAAK,CAACS,mBAAN,CAA0BR,UADnC;AAEHE,IAAAA,cAAc,EAAEH,KAAK,CAACS,mBAAN,CAA0BN,cAFvC;AAIHC,IAAAA,gBAAgB,EAAEJ,KAAK,CAACU,cAAN,CAAqBN;AAJpC,GAAP;AAMH,CAPD;;AAUA,eAAeV,OAAO,CAClBc,eADkB,EAElBH,kBAFkB,CAAP,CAGbP,GAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { incrementNumberOfRequestsMade, getWeatherData} from './actions'\n\nclass App extends Component {\n  render() {\n\n      const weatherSummaryComponent = this.state.isFetching ?\n          // we want to display a loading message to user while asycn data fetch happens\n          <div>\n              Fetching...\n          </div>\n          :\n          <div>\n              <b>{this.props.weatherSummary}</b>\n          </div>;\n\n    return (\n      <div>\n        <div>\n            <div>Show weather:</div>\n            <button>London</button>\n            <button>Paris</button>\n            <button>New York</button>\n            <button>Peckham</button>\n        </div>\n          <div>\n            <div>Weather in Selected City: {weatherSummaryComponent}</div>\n            <div>Number of requests made:<b>{this.props.numberOfRequests}</b></div>\n          </div>\n      </div>\n    );\n  }\n}\n\n/*\n     mapDispatchToProps\n\n     Allows us to pass the dispatch methods as callbacks via props\n     into our view layer. This way our component can easily\n     dispatch actions through action-creator functions. This is cleaner\n     than having them dispatch actions themselves\n\n */\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        actions: bindActionCreators({\n            incrementNumberOfRequestsMade,\n            getWeatherData,\n\n        }, dispatch)\n    };\n};\n\n/*\n    mapStateToProps\n\n    Allows us to pass application state as read-only props to our component.\n */\n\nconst mapStateToProps = (state) => {\n    return {\n        isFetching: state.weatherDataHandling.isFetching,\n        weatherSummary: state.weatherDataHandling.weatherSummary,\n\n        numberOfRequests: state.requestLogging.numberOfRequests\n    };\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n"]},"metadata":{},"sourceType":"module"}