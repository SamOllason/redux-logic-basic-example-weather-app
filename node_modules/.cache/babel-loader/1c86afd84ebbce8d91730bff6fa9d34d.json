{"ast":null,"code":"import * as types from '../../actions/types';\nimport { createLogic } from 'redux-logic';\nimport axios from 'axios';\nvar appId = \"b0a33ce7b1e3c397415e4ae403b6a3fd\";\nvar getWeatherDataLogic = createLogic({\n  type: types.GET_WEATHER_FOR_CITY,\n  // Respond to actions of this type\n  latest: true,\n  // Only provide the latest response if fired many times\n  processOptions: {\n    dispatchReturn: true,\n    // Automatically dispatch the actions below from the resolved/rejected promise\n    successType: types.GET_WEATHER_FOR_CITY_SUCCESSFUL,\n    // If promise success, dispatch this action\n    failType: types.GET_WEATHER_FOR_CITY_FAILURE // If promise fails, dispatch this action\n\n  },\n  // Declare our promise inside a process.\n  // When promise returns one of the actions above will be processed\n  process: function process(_ref) {\n    var action = _ref.action;\n    console.log('started process with action type: ' + action.type);\n    console.log('started process with action payload: ' + action.payload);\n    return axios(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(action.payload, \"&APPID=\").concat(appId)).then(function (resp) {\n      return resp.data;\n    });\n  }\n});\nexport default [getWeatherDataLogic];","map":{"version":3,"sources":["/Users/samollason/Documents/Develop/Web/simple-weather-app-redux-logic-example/src/redux/logic/weatherDataHandlingLogic.js"],"names":["types","createLogic","axios","appId","getWeatherDataLogic","type","GET_WEATHER_FOR_CITY","latest","processOptions","dispatchReturn","successType","GET_WEATHER_FOR_CITY_SUCCESSFUL","failType","GET_WEATHER_FOR_CITY_FAILURE","process","action","console","log","payload","then","resp","data"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,qBAAvB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,KAAK,GAAG,kCAAd;AAEA,IAAMC,mBAAmB,GAAGH,WAAW,CAAC;AACpCI,EAAAA,IAAI,EAAEL,KAAK,CAACM,oBADwB;AACD;AACnCC,EAAAA,MAAM,EAAE,IAF4B;AAEtB;AAEdC,EAAAA,cAAc,EAAE;AACZC,IAAAA,cAAc,EAAE,IADJ;AACU;AAEtBC,IAAAA,WAAW,EAAEV,KAAK,CAACW,+BAHP;AAGwC;AACpDC,IAAAA,QAAQ,EAAEZ,KAAK,CAACa,4BAJJ,CAIiC;;AAJjC,GAJoB;AAWpC;AACA;AACAC,EAAAA,OAboC,yBAahB;AAAA,QAAVC,MAAU,QAAVA,MAAU;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCF,MAAM,CAACV,IAA1D;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAA0CF,MAAM,CAACG,OAA7D;AAEA,WAAOhB,KAAK,6DAAsDa,MAAM,CAACG,OAA7D,oBAA8Ef,KAA9E,EAAL,CACFgB,IADE,CACG,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAT;AAAA,KADP,CAAP;AAEH;AAnBmC,CAAD,CAAvC;AAsBA,eAAe,CACXjB,mBADW,CAAf","sourcesContent":["import * as types from '../../actions/types';\nimport { createLogic } from 'redux-logic';\nimport axios from 'axios';\n\nconst appId = \"b0a33ce7b1e3c397415e4ae403b6a3fd\";\n\nconst getWeatherDataLogic = createLogic({\n    type: types.GET_WEATHER_FOR_CITY,  // Respond to actions of this type\n    latest: true, // Only provide the latest response if fired many times\n\n    processOptions: {\n        dispatchReturn: true, // Automatically dispatch the actions below from the resolved/rejected promise\n\n        successType: types.GET_WEATHER_FOR_CITY_SUCCESSFUL, // If promise success, dispatch this action\n        failType: types.GET_WEATHER_FOR_CITY_FAILURE // If promise fails, dispatch this action\n    },\n\n    // Declare our promise inside a process.\n    // When promise returns one of the actions above will be processed\n    process({ action }) {\n        console.log('started process with action type: ' + action.type);\n        console.log('started process with action payload: ' + action.payload);\n\n        return axios(`https://api.openweathermap.org/data/2.5/weather?q=${action.payload}&APPID=${appId}`)\n            .then(resp => resp.data);\n    }\n});\n\nexport default [\n    getWeatherDataLogic\n];\n"]},"metadata":{},"sourceType":"module"}